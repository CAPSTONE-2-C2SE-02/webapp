from os import path
import sys
import json
import re
from huggingface_hub import InferenceClient
from config import API_KEY


sys.path.append(path.abspath(path.join(path.dirname(__file__), "..")))
from src.pineconeClient import query_pinecone

client = InferenceClient(
    provider="novita",
    api_key=API_KEY,
)
model_name = "deepseek-ai/DeepSeek-V3-0324"

current_tour = None
last_query = ""
ALL_TOURS = {}  

SUPPORTED_DESTINATIONS = []

TOUR_CONFIG = {
    "min_tours_per_destination": 1,  
    "max_destinations_to_show": 2,   
    "max_tours_per_destination": 2    
}

conversation_state = {
    "last_tour_id": None,
    "current_topic": None, 
    "query_counter": 0     
}

# 1. C√°c h√†m kh·ªüi t·∫°o v√† c·∫•u h√¨nh
def load_all_tours():
    global ALL_TOURS, SUPPORTED_DESTINATIONS
    ALL_TOURS = {"all": []}
    
    print("üåü Ch√†o m·ª´ng ƒë·∫øn v·ªõi Chatbot Du l·ªãch! üåü")
    print("üëâ ƒêang t·∫£i d·ªØ li·ªáu tour...")

    all_tours = query_pinecone("tour", top_k=30)  
    
    # T·∫°o cache truy c·∫≠p nhanh
    tour_by_id = {}
    
    if all_tours:
        # Tr√≠ch xu·∫•t t·∫•t c·∫£ destinations
        for tour in all_tours:
            destination = tour.get('destination', '')
            if destination and destination != "Kh√°c" and destination not in SUPPORTED_DESTINATIONS:
                SUPPORTED_DESTINATIONS.append(destination)
        
        # L∆∞u tr·ªØ trong tour_by_id ƒë·ªÉ truy c·∫≠p nhanh
        for tour in all_tours:
            tour_id = tour.get('code', '')
            if tour_id:
                tour_by_id[tour_id] = tour
        
        # Ph√¢n lo·∫°i tours theo destinations
        for tour in all_tours:
            destination = tour.get('destination', '')
            
            # Th√™m destination v√†o tour n·∫øu ch∆∞a c√≥
            if 'destination' not in tour:
                tour['destination'] = destination
                
            # Th√™m tour v√†o danh s√°ch theo ƒëi·ªÉm ƒë·∫øn
            if destination not in ALL_TOURS:
                ALL_TOURS[destination] = []
            
            ALL_TOURS[destination].append(tour)
            ALL_TOURS["all"].append(tour)
    
    # L∆∞u cache v√†o bi·∫øn to√†n c·ª•c ƒë·ªÉ truy c·∫≠p nhanh
    global TOUR_CACHE
    TOUR_CACHE = {
        'by_id': tour_by_id
    }
    
    print("‚úÖ ƒê√£ t·∫£i xong d·ªØ li·ªáu tour.")
    print(f"ALL_TOURS loaded with {len(ALL_TOURS)} destinations")
    for dest in ALL_TOURS:
        if dest != "all":
            print(f"- {dest}: {len(ALL_TOURS[dest])} tours")
    print("üëâ B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°c tour t·∫°i:", ", ".join(SUPPORTED_DESTINATIONS) 
          if SUPPORTED_DESTINATIONS else "Ch∆∞a c√≥ ƒë·ªãa ƒëi·ªÉm n√†o")

def _reset_conversation_state():
    return {
        "last_tour_id": None,
        "current_topic": None,
        "query_counter": 0,
        "last_destination": None,
        "last_region": None,
        "user_interests": []  # L∆∞u tr·ªØ s·ªü th√≠ch c·ªßa user qua c√°c l·∫ßn t∆∞∆°ng t√°c
    }

# 2. C√°c h√†m ph√¢n t√≠ch c√¢u h·ªèi
def is_destination_related(query):
    query_lower = query.lower()
    
    # T·∫°o b·∫£ng bƒÉm t·ª´ c√°c t·ª´ trong query
    query_words_set = set(query_lower.split())
    
    # Ki·ªÉm tra match ch√≠nh x√°c tr∆∞·ªõc
    for location in SUPPORTED_DESTINATIONS:
        loc_lower = location.lower()
        if loc_lower in query_lower:
            return location
    
    # T√¨m destination c√≥ t·ªâ l·ªá match cao nh·∫•t
    best_match = None
    best_score = 0
    for location in SUPPORTED_DESTINATIONS:
        loc_lower = location.lower()
        loc_words_set = set(loc_lower.split())
        
        # T√≠nh t·ªâ l·ªá tr√πng kh·ªõp
        common_words = query_words_set.intersection(loc_words_set)
        if common_words:
            score = len(common_words) / len(loc_words_set)
            if score > best_score and score >= 0.5:  # Y√™u c·∫ßu t·ªâ l·ªá match t·ªëi thi·ªÉu 50%
                best_score = score
                best_match = location
    
    # N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm ph√π h·ª£p, ki·ªÉm tra xem c√≥ ph·∫£i ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ ƒë·ªãa ƒëi·ªÉm kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
    if not best_match:
        # Danh s√°ch c√°c t·ª´ kh√≥a ch·ªâ ƒë·ªãa ƒëi·ªÉm
        location_keywords = ["ƒëi", "tour", "du l·ªãch", "tham quan", "ƒë·ªãa ƒëi·ªÉm"]
        
        # Ki·ªÉm tra xem c√¢u query c√≥ ch·ª©a t·ª´ kh√≥a ch·ªâ ƒë·ªãa ƒëi·ªÉm kh√¥ng
        contains_location_keyword = any(keyword in query_lower for keyword in location_keywords)
        
        # Ki·ªÉm tra xem trong c√¢u c√≥ t·ª´ n√†o kh√¥ng n·∫±m trong danh s√°ch SUPPORTED_DESTINATIONS kh√¥ng
        potential_locations = [word for word in query_lower.split() if len(word) > 3 and word not in ["tour", "kh√¥ng", "s·∫Øp", "t·ªõi", "c√≥", "ƒëi"]]
        
        if contains_location_keyword and potential_locations:
            # Tr·∫£ v·ªÅ t·ª´ c√≥ th·ªÉ l√† ƒë·ªãa ƒëi·ªÉm nh∆∞ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
            for word in potential_locations:
                if word not in ' '.join(SUPPORTED_DESTINATIONS).lower():
                    return word.capitalize()  
    
    return best_match

def is_tour_related(query):
    related_keywords = [
        # T·ª´ kh√≥a chung v·ªÅ tour
        "tour", "du l·ªãch", "tham quan", "kh√°m ph√°", "tr·∫£i nghi·ªám",
        "h√†nh tr√¨nh", "ƒëi", "chuy·∫øn", "l·ªãch tr√¨nh", "ch∆∞∆°ng tr√¨nh",
        
        # Chi ph√≠
        "gi√°", "chi ph√≠", "tr·∫£", "ti·ªÅn", "ƒë·∫∑t c·ªçc", "thanh to√°n",
        "bao nhi√™u", "m·∫Øc", "r·∫ª", "ƒë·∫Øt", "ti·∫øt ki·ªám", "gi√° c·∫£",
        
        # Th·ªùi gian
        "th·ªùi gian", "m·∫•y ng√†y", "bao l√¢u", "k√©o d√†i", "l·ªãch",
        "ng√†y", "tu·∫ßn", "th√°ng", "gi·ªù", "l·ªãch tr√¨nh", "h√†nh tr√¨nh",
        
        # Ng∆∞·ªùi tham gia
        "s·ªë ng∆∞·ªùi", "ng∆∞·ªùi tham gia", "t·ªëi ƒëa", "quy m√¥", "s·ª©c ch·ª©a",
        "ƒëo√†n", "nh√≥m", "gia ƒë√¨nh", "b·∫°n b√®", "ng∆∞·ªùi l·ªõn", "tr·∫ª em",
        
        # ƒê·ªãa ƒëi·ªÉm
        "ƒë·ªãa ƒëi·ªÉm", "ƒëi·ªÉm ƒë·∫øn", "tham quan", "gh√© thƒÉm", "d·ª´ng ch√¢n", 
        "kh√°ch s·∫°n", "resort", "ngh·ªâ d∆∞·ª°ng", "nh√† ngh·ªâ", "l∆∞u tr√∫",
        
        # Ho·∫°t ƒë·ªông
        "ho·∫°t ƒë·ªông", "tham gia", "tr·∫£i nghi·ªám", "kh√°m ph√°", "vui ch∆°i",
        "gi·∫£i tr√≠", "·∫©m th·ª±c", "m√≥n ƒÉn", "ƒë·∫∑c s·∫£n", "mua s·∫Øm", "ch·ª•p ·∫£nh",
        
        # M√¥ t·∫£
        "m√¥ t·∫£", "chi ti·∫øt", "c√≥ nh·ªØng g√¨", "bao g·ªìm", "g·ªìm c√≥",
        "th√¥ng tin", "di·ªÖn ra", "nh∆∞ th·∫ø n√†o", "ra sao", "ntn"
    ]
    
    query_lower = query.lower()
    
    if len(query_lower.split()) <= 3:
        return True
        
    return any(keyword in query_lower for keyword in related_keywords)

def is_follow_up_question(query, conversation_state):
    query_lower = query.lower()
    
    # C√°c t·ª´ kh√≥a ch·ªâ b√°o c√¢u h·ªèi ti·∫øp theo r√µ r√†ng
    explicit_follow_up_indicators = [
        # T·ª´ n·ªëi
        "c√≤n", "v·∫≠y", "th√¨", "th√¨ sao", "th·∫ø c√≤n", "c√≤n v·ªÅ", "v·ªÅ vi·ªác", 
        
        # C√¢u h·ªèi ng·∫Øn c·ª• th·ªÉ v·ªÅ tour hi·ªán t·∫°i
        "gi√°?", "m·∫•y ng√†y?", "bao l√¢u?", "bao nhi√™u?", "khi n√†o?", "·ªü ƒë√¢u?", 
        
        # C·∫•u tr√∫c c√¢u h·ªèi ti·∫øp theo
        "nh∆∞ th·∫ø n√†o", "ra sao", "nh∆∞ n√†o", "th·∫ø n√†o", "l√†m sao", "ki·ªÉu g√¨",
        "c√≥ g√¨", "g·ªìm nh·ªØng g√¨", "bao g·ªìm g√¨", "c√≥ nh·ªØng g√¨", "c√≥ bao nhi√™u",
        
        # ƒê·∫°i t·ª´ ch·ªâ ƒë·ªãnh kh√¥ng c√≥ ch·ªß ng·ªØ r√µ r√†ng
        "n√≥", "ƒë√≥", "n√†y", "kia", "h·ªç", "ch√∫ng", "tour n√†y", "tour ƒë√≥"
    ]
    
    # C√°c t·ª´ kh√≥a th√¥ng tin c·ª• th·ªÉ - c·∫ßn k·∫øt h·ª£p v·ªõi context ƒë·ªÉ x√°c ƒë·ªãnh l√† follow-up
    specific_info_keywords = [
        "gi√° c·∫£", "chi ph√≠", "th·ªùi gian", "l·ªãch tr√¨nh", "s·ªë ng∆∞·ªùi", "ho·∫°t ƒë·ªông",
        "gi·∫£m gi√°", "khuy·∫øn m√£i", "∆∞u ƒë√£i", "ƒë·∫∑t tour", "thanh to√°n", "h·ªßy tour"
    ]
    
    # C√°c t·ª´ kh√≥a ch·ªâ r√µ m·ªôt y√™u c·∫ßu t√¨m ki·∫øm m·ªõi, KH√îNG ph·∫£i follow-up
    new_search_indicators = [
        "t√¨m tour", "tour ·ªü", "tour t·∫°i", "tour ƒëi", "tour ƒë·∫øn", 
        "mu·ªën ƒëi", "c√≥ tour", "tour n√†o", "tour kh√°c", "tour m·ªõi"
    ]
    
    # Ki·ªÉm tra tr∆∞·ªõc n·∫øu r√µ r√†ng l√† t√¨m ki·∫øm m·ªõi
    for indicator in new_search_indicators:
        if indicator in query_lower:
            return False
    
    # Ki·ªÉm tra n·∫øu c√≥ t·ª´ kh√≥a follow-up r√µ r√†ng
    for indicator in explicit_follow_up_indicators:
        if indicator in query_lower:
            return True
    
    # Ki·ªÉm tra c√°c t·ª´ kh√≥a th√¥ng tin c·ª• th·ªÉ k·∫øt h·ª£p v·ªõi context
    if conversation_state.get("current_topic") is not None:
        for keyword in specific_info_keywords:
            if keyword in query_lower:
                return True
    
    # Ki·ªÉm tra n·∫øu ƒëi·ªÉm ƒë·∫øn ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p tr√πng v·ªõi tour hi·ªán t·∫°i
    if current_tour and current_tour.get('destination', '').lower() in query_lower:
        # N·∫øu query ch·ªâ ƒë·ªÅ c·∫≠p ƒë·∫øn ƒëi·ªÉm ƒë·∫øn hi·ªán t·∫°i v√† kh√¥ng c√≥ t·ª´ kh√≥a t√¨m ki·∫øm m·ªõi
        if len(query_lower.split()) <= 5:
            return True
    
    # Ki·ªÉm tra tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: c√¢u h·ªèi r·∫•t ng·∫Øn kh√¥ng c√≥ t·ª´ kh√≥a t√¨m ki·∫øm m·ªõi
    if len(query_lower.split()) <= 2 and current_tour:
        has_new_destination = False
        for dest in SUPPORTED_DESTINATIONS:
            if dest.lower() in query_lower and dest.lower() != current_tour.get('destination', '').lower():
                has_new_destination = True
                break
        
        if not has_new_destination:
            return True
        
    return False

def _determine_query_type(query_lower, conversation_state):
    """X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi."""
    if not query_lower.strip() or query_lower.strip() in ["....", ".", "..", "...", "?", "???"]:
        return "empty"
    
    if not any(c.isalnum() for c in query_lower):
        return "empty"  
    
    # ∆Øu ti√™n 1: Ki·ªÉm tra n·∫øu l√† c√¢u h·ªèi v·ªÅ v√πng mi·ªÅn
    if any(region in query_lower for region in ["mi·ªÅn b·∫Øc", "mi·ªÅn trung", "mi·ªÅn nam"]):
        return "region"
    
    # ∆Øu ti√™n 2: Nh·∫≠n di·ªán c√¢u h·ªèi v·ªÅ HO·∫†T ƒê·ªòNG (c·∫ßn x·ª≠ l√Ω tr∆∞·ªõc ƒë·ªÉ kh√¥ng b·ªã nh·∫ßm)
    activity_patterns = [
        r"(tour|chuy·∫øn ƒëi).*(n√†o).*(c√≥).*(ho·∫°t ƒë·ªông|l·∫∑n|b∆°i|ƒÉn u·ªëng|·∫©m th·ª±c)",  # Tour n√†o c√≥ ho·∫°t ƒë·ªông g√¨
        r"(c√≥).*(tour|chuy·∫øn ƒëi).*(n√†o).*(v·ªÅ|c√≥).*(ho·∫°t ƒë·ªông|l·∫∑n|b∆°i|ƒÉn u·ªëng|·∫©m th·ª±c)",  # C√≥ tour n√†o v·ªÅ ho·∫°t ƒë·ªông
        r"(t√¨m|ki·∫øm).*(tour).*(l·∫∑n|b∆°i|ƒÉn u·ªëng|·∫©m th·ª±c)",  # T√¨m tour c√≥ ho·∫°t ƒë·ªông
        r"(mu·ªën|th√≠ch).*(l·∫∑n|b∆°i|ƒÉn u·ªëng|tham quan)",  # Mu·ªën ho·∫°t ƒë·ªông g√¨
        r"(tour|chuy·∫øn ƒëi).*(ƒë·ªÉ).*(l·∫∑n|b∆°i|ƒÉn u·ªëng)",  # Tour ƒë·ªÉ l√†m g√¨
        r"(tour|chuy·∫øn ƒëi).*(ph√π h·ª£p).*(l·∫∑n|b∆°i|ƒÉn u·ªëng)"  # Tour ph√π h·ª£p v·ªõi ho·∫°t ƒë·ªông g√¨
    ]
    
    for pattern in activity_patterns:
        if re.search(pattern, query_lower):
            print(f"Matched activity pattern: {pattern}")
            return "activity"
    
    # ∆Øu ti√™n 3: Nh·∫≠n di·ªán c√¢u h·ªèi v·ªÅ tour c·ª• th·ªÉ
    specific_tour_patterns = [
        r"tour\s+(tr·∫£i nghi·ªám|kh√°m ph√°)\s+[\w\s]+(h√† n·ªôi|ƒë√† n·∫µng|h·ªôi an|hu·∫ø|h·ªì ch√≠ minh|s√†i g√≤n|nha trang|ƒë√† l·∫°t)",  
        r"(cho\s+\w+\s+bi·∫øt|th√¥ng tin)\s+v·ªÅ\s+tour\s+[\w\s]+",  # "cho t√¥i bi·∫øt v·ªÅ tour..."
        r"(gi·ªõi thi·ªáu|n√≥i|k·ªÉ)\s+v·ªÅ\s+tour\s+[\w\s]+",  # "gi·ªõi thi·ªáu v·ªÅ tour..."
        r"tour\s+[\w\s]+(\d+\s+ng√†y|\d+\s+ƒë√™m)"  # Tour + s·ªë ng√†y/ƒë√™m
    ]
    
    for pattern in specific_tour_patterns:
        if re.search(pattern, query_lower):
            print(f"Matched specific tour pattern: {pattern}")
            return "specific_tour"
    
    # ∆Øu ti√™n 4: Ki·ªÉm tra n·∫øu l√† c√¢u h·ªèi v·ªÅ tour m·ªõi
    new_tour_indicators = [
        "tour kh√°c", "c√≤n tour n√†o", "tour m·ªõi", "t√¨m tour", "gi·ªõi thi·ªáu tour", 
        "c√≥ tour n√†o", "tour du l·ªãch", "th√¥ng tin tour", "gi√° c·ªßa tour", "th·ªùi gian tour",
        "m√¥ t·∫£ tour", "danh s√°ch tour", "tour ·ªü", "tour t·∫°i", "tour ƒëi", "tour ƒë·∫øn"
    ]
    if any(indicator in query_lower for indicator in new_tour_indicators):
        # Ki·ªÉm tra n·∫øu c√≥ ƒë·ªÅ c·∫≠p ƒë·∫øn ƒëi·ªÉm ƒë·∫øn c·ª• th·ªÉ
        for dest in SUPPORTED_DESTINATIONS:
            if dest.lower() in query_lower:
                return "new_tour"
        return "new_tour"
    
    # ∆Øu ti√™n 5: Ki·ªÉm tra n·∫øu l√† c√¢u h·ªèi follow-up cho tour hi·ªán t·∫°i
    if current_tour and is_follow_up_question(query_lower, conversation_state):
        return "follow_up"
    
    # ∆Øu ti√™n 6: Ki·ªÉm tra t·ª´ kh√≥a ho·∫°t ƒë·ªông ri√™ng l·∫ª (sau khi ƒë√£ lo·∫°i tr·ª´ c√°c tr∆∞·ªùng h·ª£p tr√™n)
    activity_keywords = [
        "l·∫∑n", "bi·ªÉn", "b∆°i",
        "ƒÉn u·ªëng", "ƒë·ªì ƒÉn", "m√≥n ƒÉn", "·∫©m th·ª±c", "ƒÉn", "u·ªëng", "ƒë·∫∑c s·∫£n", "h·∫£i s·∫£n",
        "bbq", "n∆∞·ªõng", "ti·ªác n∆∞·ªõng",
        "tham quan", "kh√°m ph√°", "du l·ªãch", "check-in",
        "c·∫ßu r·ªìng", "phun l·ª≠a", "c·∫ßu",
        "bi·ªÉn", "b√£i bi·ªÉn", "b·ªù bi·ªÉn", "ƒë·∫°i d∆∞∆°ng",
        "vƒÉn h√≥a", "l·ªãch s·ª≠", "di s·∫£n", "truy·ªÅn th·ªëng",
        "ph·ªë c·ªï", "l√†ng ch√†i", "nh√† c·ªï"
    ]
    
    for activity in activity_keywords:
        if activity in query_lower:
            # N·∫øu c√¢u h·ªèi ch·ªâ ch·ª©a t·ª´ "tour" v√† t·ª´ kh√≥a ho·∫°t ƒë·ªông, kh√¥ng c√≥ t√™n c·ª• th·ªÉ
            # th√¨ x√°c ƒë·ªãnh l√† activity
            if "tour" in query_lower and len(query_lower.split()) <= 5:
                return "activity"
                
            # N·∫øu c√¢u c√≥ d·∫°ng "tour c√≥ [ho·∫°t ƒë·ªông]" m√† kh√¥ng c√≥ t√™n tour c·ª• th·ªÉ
            if re.search(r"tour\s+(c√≥|v·ªõi)\s+" + activity, query_lower):
                return "activity"
                
            return "activity"
    
    # ∆Øu ti√™n 7 (M·ªöI): Nh·∫≠n di·ªán c√¢u h·ªèi chung v·ªÅ tour (kh√¥ng li√™n quan ƒë·∫øn ƒëi·ªÉm ƒë·∫øn c·ª• th·ªÉ)
    general_tour_patterns = [
        r"(tour|chuy·∫øn ƒëi).*(ph·ªï bi·∫øn|n·ªïi ti·∫øng|hay|ƒë·∫πp|t·ªët)",  # Tour ph·ªï bi·∫øn/n·ªïi ti·∫øng
        r"(gi·ªõi thi·ªáu|g·ª£i √Ω|cho xem|ƒë·ªÅ xu·∫•t|danh s√°ch).*(tour|chuy·∫øn ƒëi)",  # Gi·ªõi thi·ªáu/g·ª£i √Ω tour
        r"(c√≥).*(nh·ªØng|m·ªôt s·ªë|c√°c).*(tour|chuy·∫øn ƒëi|du l·ªãch)",  # C√≥ nh·ªØng tour n√†o
        r"(tour|chuy·∫øn ƒëi).*(gi√°).*(d∆∞·ªõi|tr√™n|kho·∫£ng|t·ª´|bao nhi√™u)",  # Tour gi√° bao nhi√™u
        r"(tour|chuy·∫øn ƒëi).*(n√†o).*(gi√°)",  # Tour n√†o gi√°...
        r"(tour|chuy·∫øn ƒëi).*(ph√π h·ª£p|th√≠ch h·ª£p).*(v·ªõi|cho)",  # Tour ph√π h·ª£p v·ªõi...
        r"(tour|chuy·∫øn ƒëi).*(s·ªë l∆∞·ª£ng|nh√≥m|gia ƒë√¨nh|b·∫°n b√®)"  # Tour cho s·ªë l∆∞·ª£ng/nh√≥m
    ]
    
    for pattern in general_tour_patterns:
        if re.search(pattern, query_lower):
            print(f"Matched general tour pattern: {pattern}")
            return "general_tour"  
    
    # Ki·ªÉm tra ƒëi·ªÉm ƒë·∫øn m·ªõi
    if any(dest.lower() in query_lower for dest in SUPPORTED_DESTINATIONS) and current_tour:
        current_dest = current_tour.get('destination', '').lower() 
        for dest in SUPPORTED_DESTINATIONS:
            if dest.lower() in query_lower and dest.lower() != current_dest:
                return "new_tour"  
    
    if not is_tour_related(query_lower):
        return "non_tour"
    
    # M·∫∑c ƒë·ªãnh l√† c√¢u h·ªèi t√¨m ki·∫øm m·ªõi
    return "search"

def _is_general_tour_question(query_lower):
    general_tour_keywords = ["tour hi·ªán t·∫°i", "tour n√†o", "c√°c tour", "tour du l·ªãch", 
                       "danh s√°ch tour", "gi·ªõi thi·ªáu tour", "tour ph·ªï bi·∫øn"]
    return any(keyword in query_lower for keyword in general_tour_keywords)

# X√°c ƒë·ªãnh tr·ªçng t√¢m c·ªßa c√¢u h·ªèi
def _determine_question_focus(query_lower):
    if any(keyword in query_lower for keyword in ["gi√° bao nhi√™u", "gi√°", "chi ph√≠"]):
        return "price"
    elif any(keyword in query_lower for keyword in ["th·ªùi gian", "k√©o d√†i", "m·∫•y ng√†y", "bao l√¢u"]):
        return "duration"
    elif any(keyword in query_lower for keyword in ["ƒë·∫∑c ƒëi·ªÉm", "m√¥ t·∫£", "l·ªãch tr√¨nh", "c√≥ g√¨", "ch∆∞∆°ng tr√¨nh"]):
        return "description"
    elif any(keyword in query_lower for keyword in ["s·ªë ng∆∞·ªùi", "s·ªë l∆∞·ª£ng", "t·ªëi ƒëa", "s·ª©c ch·ª©a", "quy m√¥"]):
        return "maxParticipants"
    else:
        return "all"
    
# 3. C√°c h√†m t√¨m ki·∫øm
def _find_specific_tour(query_clean):
    # L√†m s·∫°ch query v√† chuy·ªÉn th√†nh lowercase
    query_clean = re.sub(r'(th√¥ng tin|chi ti·∫øt|tour|v·ªÅ)\s+', '', query_clean).strip().lower()
    
    # T·∫°o t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u tr·ªØ ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng c·ªßa t·ª´ng tour
    tour_scores = {}
    
    for destination in ALL_TOURS:
        if destination == "all":
            continue
            
        for tour in ALL_TOURS[destination]:
            tour_title = tour.get('title', '').lower()
            
            # Ki·ªÉm tra tr√πng kh·ªõp ch√≠nh x√°c
            if query_clean in tour_title or tour_title in query_clean:
                return tour
            
            # Ki·ªÉm tra tr√πng kh·ªõp t·ª´ng ph·∫ßn
            query_words = query_clean.split()
            title_words = tour_title.split()
            
            # T√≠nh ƒëi·ªÉm d·ª±a tr√™n s·ªë t·ª´ tr√πng kh·ªõp
            matches = sum(1 for word in query_words if word in title_words)
            if matches > 0:
                similarity_score = matches / max(len(query_words), len(title_words))
                tour_scores[tour['code']] = {
                    'score': similarity_score,
                    'tour': tour
                }
    
    # Tr·∫£ v·ªÅ tour c√≥ ƒëi·ªÉm cao nh·∫•t n·∫øu v∆∞·ª£t qua ng∆∞·ª°ng
    if tour_scores:
        best_match = max(tour_scores.items(), key=lambda x: x[1]['score'])
        if best_match[1]['score'] >= 0.3:  # Ng∆∞·ª°ng t∆∞∆°ng ƒë·ªìng t·ªëi thi·ªÉu
            return best_match[1]['tour']
            
    return None

def _find_tour_by_keywords(query):
    query_lower = query.lower()
    
    # C·∫£i thi·ªán activity mappings v√† th√™m tr·ªçng s·ªë
    activity_mappings = {
        "l·∫∑n bi·ªÉn": {"keywords": ["l·∫∑n", "bi·ªÉn", "snorkeling", "diving", "b∆°i"], "weight": 2.0},
        "·∫©m th·ª±c": {"keywords": ["ƒÉn u·ªëng", "ƒë·ªì ƒÉn", "m√≥n ƒÉn", "·∫©m th·ª±c", "ƒÉn", "u·ªëng", "ƒë·∫∑c s·∫£n", "h·∫£i s·∫£n"], "weight": 2.0},
        "bbq": {"keywords": ["bbq", "n∆∞·ªõng", "ti·ªác n∆∞·ªõng", "barbeque"], "weight": 2.0},
        "tham quan": {"keywords": ["tham quan", "kh√°m ph√°", "du l·ªãch", "check-in"], "weight": 1.5},
        "c·∫ßu r·ªìng": {"keywords": ["c·∫ßu r·ªìng", "phun l·ª≠a", "c·∫ßu"], "weight": 1.5},
        "bi·ªÉn": {"keywords": ["bi·ªÉn", "b√£i bi·ªÉn", "b·ªù bi·ªÉn", "ƒë·∫°i d∆∞∆°ng"], "weight": 1.5},
        "vƒÉn h√≥a": {"keywords": ["vƒÉn h√≥a", "l·ªãch s·ª≠", "di s·∫£n", "truy·ªÅn th·ªëng"], "weight": 1.5},
        "ph·ªë c·ªï": {"keywords": ["ph·ªë c·ªï", "l√†ng ch√†i", "nh√† c·ªï"], "weight": 1.5}
    }
    
    # Tr·ª±c ti·∫øp ki·ªÉm tra n·∫øu query ng·∫Øn g·ªçn ch·ªâ h·ªèi v·ªÅ m·ªôt ho·∫°t ƒë·ªông c·ª• th·ªÉ
    for activity, info in activity_mappings.items():
        if any(keyword in query_lower for keyword in info["keywords"]):
            # G√°n tr·ªçng s·ªë cao h∆°n cho c√°c ho·∫°t ƒë·ªông
            expanded_keywords = info["keywords"]
            activity_weight = info["weight"]
            
            # T√¨m ki·∫øm tour v·ªõi c√°c t·ª´ kh√≥a ho·∫°t ƒë·ªông c·ª• th·ªÉ n√†y
            results = []
            for destination in ALL_TOURS:
                if destination == "all":
                    continue
                    
                for tour in ALL_TOURS[destination]:
                    title = tour.get('title', '').lower()
                    description = tour.get('description', '').lower()
                    combined_text = title + " " + description
                    
                    matches = 0
                    total_weight = 0
                    
                    for keyword in expanded_keywords:
                        weight = activity_weight  # S·ª≠ d·ª•ng tr·ªçng s·ªë c·ªßa ho·∫°t ƒë·ªông
                        if keyword in title:
                            weight *= 1.5  # TƒÉng th√™m n·∫øu t·ª´ kh√≥a trong ti√™u ƒë·ªÅ
                        
                        count = combined_text.count(keyword)
                        if count > 0:
                            matches += 1
                            total_weight += weight * count
                    
                    if matches > 0:
                        score = (matches / len(expanded_keywords)) * total_weight
                        results.append({
                            'tour': tour,
                            'score': score
                        })
            
            if results:
                # S·∫Øp x·∫øp theo ƒëi·ªÉm gi·∫£m d·∫ßn v√† tr·∫£ v·ªÅ
                results.sort(key=lambda x: x['score'], reverse=True)
                return [item['tour'] for item in results[:2]] if results else []
    
    # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ tr·ª±c ti·∫øp t·ª´ ho·∫°t ƒë·ªông, ti·∫øp t·ª•c v·ªõi logic t√¨m ki·∫øm c≈©
    expanded_keywords = []
    query_words = query_lower.split()
    
    stopwords = ["tour", "du", "l·ªãch", "v·ªÅ", "·ªü", "t·∫°i", "c√≥", "nh·ªØng", "c√°c", "v√†", "kh√¥ng", "n√†o", "g√¨", "th√∫ v·ªã"]  
    filtered_words = [w for w in query_words if w not in stopwords and len(w) >= 2]
    
    for word in filtered_words:
        expanded_keywords.append(word)
        for activity, info in activity_mappings.items():
            if word in info["keywords"] or any(syn in query_lower for syn in info["keywords"]):
                expanded_keywords.extend(info["keywords"])
                break
    
    # Lo·∫°i b·ªè tr√πng l·∫∑p
    expanded_keywords = list(set(expanded_keywords))
    
    results = []
    for destination in ALL_TOURS:
        if destination == "all":
            continue
            
        for tour in ALL_TOURS[destination]:
            title = tour.get('title', '').lower()
            description = tour.get('description', '').lower()
            combined_text = title + " " + description
            
            matches = 0
            total_weight = 0
            
            for keyword in expanded_keywords:
                weight = 1.0  # Tr·ªçng s·ªë m·∫∑c ƒë·ªãnh
                if keyword in title:
                    weight = 2.0  # T·ª´ kh√≥a trong ti√™u ƒë·ªÅ quan tr·ªçng h∆°n
                
                count = combined_text.count(keyword)
                if count > 0:
                    matches += 1
                    total_weight += weight * count
            
            if matches > 0:
                score = (matches / len(expanded_keywords)) * total_weight
                results.append({
                    'tour': tour,
                    'score': score
                })
    
    results.sort(key=lambda x: x['score'], reverse=True)
    return [item['tour'] for item in results[:3]] if results else []

def _find_tour_by_id(tour_id):
    for destination in ALL_TOURS:
        for tour in ALL_TOURS[destination]:
            if tour.get('code', '') == tour_id:
                return tour
    return None

def _find_tours_by_destination(destination):
    """L·∫•y danh s√°ch tour theo ƒëi·ªÉm ƒë·∫øn.""" 
    destination_lower = destination.lower()
    
    # T√¨m ƒëi·ªÉm ƒë·∫øn ph√π h·ª£p nh·∫•t
    matched_destination = None
    for supported_dest in SUPPORTED_DESTINATIONS:
        if supported_dest.lower() == destination_lower:
            matched_destination = supported_dest
            break
    
    if not matched_destination:
        return []
    
    return ALL_TOURS.get(matched_destination, [])

def _find_tour_by_similar_name(query):
    """T√¨m tour d·ª±a tr√™n t√™n g·∫ßn ƒë√∫ng."""
    query_words = set(query.lower().split())
    best_match = None
    best_score = 0
    
    # L·∫∑p qua t·∫•t c·∫£ c√°c ƒëi·ªÉm ƒë·∫øn trong ALL_TOURS
    for destination in ALL_TOURS:
        if destination == "all":  # B·ªè qua key "all"
            continue
            
        # L·∫∑p qua t·ª´ng tour trong ƒëi·ªÉm ƒë·∫øn
        for tour in ALL_TOURS[destination]:
            tour_title = tour.get("title", "").lower()
            
            # T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng d·ª±a tr√™n s·ªë t·ª´ tr√πng kh·ªõp
            title_words = set(tour_title.split())
            common_words = query_words.intersection(title_words)
            
            # T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng
            if common_words:
                # T·ª∑ l·ªá t·ª´ trong query kh·ªõp v·ªõi title
                query_match_ratio = len(common_words) / len(query_words)
                # T·ª∑ l·ªá t·ª´ trong title kh·ªõp v·ªõi query
                title_match_ratio = len(common_words) / len(title_words)
                # ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng t·ªïng h·ª£p
                score = (query_match_ratio + title_match_ratio) / 2
                
                # N·∫øu score cao h∆°n ng∆∞·ª°ng v√† cao h∆°n best_score hi·ªán t·∫°i
                if score > best_score and score >= 0.4:
                    best_score = score
                    best_match = tour
                    
    return best_match
    
# 4. C√°c h√†m h·ªó tr·ª£ v√† ti·ªán √≠ch
def format_tour_for_response(tour):
    return {
        "title": tour.get('title', ''),
        "description": tour.get('description', ''),
        "price": tour.get('price', '0'),
        "duration": tour.get('duration', '0'),
        "destination": tour.get('destination', ''),
        "maxParticipants": tour.get('maxParticipants', 0),
        "code": tour.get('code', '')
    }

def _get_ai_response(prompt):
    completion = client.chat.completions.create(
        model=model_name,
        messages=[{"role": "user", "content": prompt}],
        max_tokens=500,
    )
    ai_response = completion.choices[0].message["content"]
    return ai_response.replace("*", "")

def get_region_from_destination(destination):
    north = ["h√† n·ªôi", "h·∫° long"]
    central = ["ƒë√† n·∫µng", "h·ªôi an","ƒë√† l·∫°t"]
    south = ["s√†i g√≤n", "v≈©ng t√†u", "nha trang"] 

    destination_lower = destination.lower()

    if any(dest in destination_lower for dest in north):
        return "mi·ªÅn b·∫Øc"
    elif any(dest in destination_lower for dest in central):
        return "mi·ªÅn trung"
    elif any(dest in destination_lower for dest in south):
        return "mi·ªÅn nam"
    else:
        return None
    
# Chu·∫©n b·ªã d·ªØ li·ªáu ph·∫£n h·ªìi d·ª±a tr√™n tr·ªçng t√¢m
def _prepare_focus_data(focus, tour):
    if focus == "price":
        return {"focus": focus, "price": tour.get('price')}
    elif focus == "duration":
        return {"focus": focus, "duration": tour.get('duration')}
    elif focus == "description":
        return {"focus": focus, "description": tour.get('description')}
    elif focus == "maxParticipants":
        return {"focus": focus, "maxParticipants": tour.get('maxParticipants')}
    else:
        return {"focus": focus, "tour": format_tour_for_response(tour)}
    
# 5. C√°c h√†m x·ª≠ l√Ω c√¢u h·ªèi
def _handle_specific_tour_question(query, tour, conversation_state):
    global current_tour
    
    current_tour = tour
    conversation_state["last_tour_id"] = tour.get('code', '')
    conversation_state["query_counter"] += 1
    
    focus = _determine_question_focus(query.lower())
    conversation_state["current_topic"] = focus
    
    tour_info = (f"Ti√™u ƒë·ªÅ: {tour.get('title', '')}, "
                 f"M√¥ t·∫£: {tour.get('description', '')}, "
                 f"Gi√°: {tour.get('price', '0')}, "
                 f"Th·ªùi gian: {tour.get('duration', '0')}, "
                 f"ƒêi·ªÉm ƒë·∫øn: {tour.get('destination', '')}, "
                 f"S·ªë ng∆∞·ªùi t·ªëi ƒëa: {tour.get('maxParticipants', '0')}")

    prompt = f"""D·ª±a tr√™n th√¥ng tin tour sau: \n\n{tour_info}\n\n
    Tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng: '{query}'.
    Ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ {"gi√° c·ªßa" if focus == "price" else "th·ªùi gian c·ªßa" if focus == "duration" else
    "m√¥ t·∫£ chi ti·∫øt c·ªßa" if focus == "description" else "s·ªë ng∆∞·ªùi t·ªëi ƒëa c·ªßa" if focus == "maxParticipants" else ""} tour.
    Ch·ªâ tr·∫£ l·ªùi v·ªÅ th√¥ng tin c·ªßa tour n√†y, kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn c√°c tour kh√°c.
    Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch v√† ƒë·∫ßy ƒë·ªß th√¥ng tin."""
    
    try:
        ai_response = _get_ai_response(prompt)
        
        # ƒêi·ªÅu ch·ªânh data tr·∫£ v·ªÅ d·ª±a tr√™n focus
        response_data = {}
        
        if focus in ["price", "duration", "maxParticipants"]:
            response_data = {
                "focus": focus,
                "value": tour.get(focus, "Kh√¥ng c√≥ th√¥ng tin"),
                "tourTitle": tour.get('title', '')  
            }
        elif focus == "description":
            response_data = {
                "focus": focus,
                "value": tour.get('description', "Kh√¥ng c√≥ m√¥ t·∫£"),
                "destination": tour.get('destination', ''),
                "tourTitle": tour.get('title', '')
            }
        else:
            response_data = {
                "focus": focus,
                "tour": format_tour_for_response(tour)
            }
        
        return {
            "status": "success",
            "message": ai_response,
            "data": response_data,
            "error": None
        }
    except Exception as e:
        return {
            "status": "error",
            "error": f"L·ªói khi g·ªçi model AI: {str(e)}",
            "message": "",
            "data": None
        }
    
def _handle_destination_question(query, destination, conversation_state):
    global current_tour

    # Ki·ªÉm tra xem ƒëi·ªÉm ƒë·∫øn c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
    if destination not in SUPPORTED_DESTINATIONS:
        return {
            "status": "warning",
            "message": f"Xin l·ªói, hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin v·ªÅ tour t·∫°i {destination}.",
            "data": None,
            "error": None
        }
    
    # L·∫•y danh s√°ch tour t·∫°i ƒëi·ªÉm ƒë·∫øn n√†y
    destination_tours = _find_tours_by_destination(destination)
    
    if not destination_tours:
        current_tour = None
        conversation_state["last_tour_id"] = None
        conversation_state["current_topic"] = None
        return {
            "status": "warning",
            "message": f"Kh√¥ng t√¨m th·∫•y tour n√†o t·∫°i {destination}.",
            "data": None,
            "error": None
        }
    
    # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tour tr·∫£ v·ªÅ
    max_tours = min(TOUR_CONFIG["max_tours_per_destination"], len(destination_tours))
    min_tours = min(TOUR_CONFIG["min_tours_per_destination"], len(destination_tours))
    num_tours = max(min_tours, min(max_tours, len(destination_tours)))
    tours_to_return = destination_tours[:num_tours]
    
    # T·∫°o context cho AI
    context = "\n".join([
        f"Ti√™u ƒë·ªÅ: {tour.get('title', '')}, "
        f"M√¥ t·∫£: {tour.get('description', '')}, "
        f"Gi√°: {tour.get('price', '0')}, "
        f"Th·ªùi gian: {tour.get('duration', '0')}, "
        f"ƒêi·ªÉm ƒë·∫øn: {tour.get('destination', '')}, "
        f"S·ªë ng∆∞·ªùi t·ªëi ƒëa: {tour.get('maxParticipants', '0')}"
        for tour in tours_to_return
    ])

    prompt = f"""D·ª±a tr√™n th√¥ng tin tour sau: \n\n{context}\n\n
    Tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng: '{query}'.
    Ng∆∞·ªùi d√πng ƒëang t√¨m tour t·∫°i {destination}.
    H√£y tr√¨nh b√†y t·∫•t c·∫£ {len(tours_to_return)} tour theo ƒë·ªãnh d·∫°ng sau cho m·ªói tour: \n\n
    1. [T√™n Tour]\n   - ƒêi·ªÉm ƒë·∫øn/Ho·∫°t ƒë·ªông: [M√¥ t·∫£ ng·∫Øn g·ªçn]\n   - Gi√°: [Gi√°] | Th·ªùi gian: [Th·ªùi gian]\n\n
    B·∫Øt ƒë·∫ßu b·∫±ng m·ªôt c√¢u gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ s·ªë l∆∞·ª£ng tour t√¨m th·∫•y t·∫°i {destination}."""
    
    try:
        ai_response = _get_ai_response(prompt)
        
        # N·∫øu ch·ªâ c√≥ m·ªôt tour, ƒë·∫∑t l√†m tour hi·ªán t·∫°i
        if len(destination_tours) == 1:
            current_tour = destination_tours[0]
            conversation_state["last_tour_id"] = current_tour.get('code', '')
            conversation_state["current_topic"] = "destination"
        
        conversation_state["query_counter"] += 1
        
        return {
            "status": "success",
            "message": ai_response,
            "data": {
                "destination": destination,
                "tours": [format_tour_for_response(tour) for tour in tours_to_return]
            },
            "error": None
        }
    except Exception as e:
        return {
            "status": "error",
            "error": f"L·ªói khi g·ªçi model AI: {str(e)}",
            "message": "",
            "data": None
        }
    
def _handle_general_tour_question(query, conversation_state):
    """X·ª≠ l√Ω c√¢u h·ªèi chung v·ªÅ tour b·∫±ng c√°ch gi·ªõi thi·ªáu nhi·ªÅu tour t·ª´ nhi·ªÅu ƒëi·ªÉm ƒë·∫øn."""

    num_destinations_to_show = TOUR_CONFIG["max_destinations_to_show"]
    destinations_to_show = []
    all_recommended_tours = []
    
    # Ch·ªçn m·ªôt s·ªë ƒëi·ªÉm ƒë·∫øn ng·∫´u nhi√™n t·ª´ danh s√°ch h·ªó tr·ª£
    import random
    random_destinations = random.sample(SUPPORTED_DESTINATIONS, min(num_destinations_to_show, len(SUPPORTED_DESTINATIONS)))
    
    # V·ªõi m·ªói ƒëi·ªÉm ƒë·∫øn, l·∫•y √≠t nh·∫•t 2 tour (n·∫øu c√≥)
    for destination in random_destinations:
        tours = _find_tours_by_destination(destination)
        if tours:
            # L·∫•y t·ªëi thi·ªÉu 1, t·ªëi ƒëa 2 tour t·ª´ m·ªói ƒëi·ªÉm ƒë·∫øn
            max_tours = min(TOUR_CONFIG["max_tours_per_destination"], len(tours))
            min_tours = min(TOUR_CONFIG["min_tours_per_destination"], len(tours))
            num_tours = max(min_tours, min(max_tours, len(tours)))
            
            dest_tours = tours[:num_tours]
            all_recommended_tours.extend(dest_tours)
            destinations_to_show.append(destination)
    
    if not all_recommended_tours:
        return {
            "status": "warning",
            "message": "Hi·ªán t·∫°i kh√¥ng c√≥ tour n√†o ƒë·ªÉ gi·ªõi thi·ªáu.",
            "data": None,
            "error": None
        }
    
    # T·∫°o n·ªôi dung tin nh·∫Øn
    destination_messages = []
    tours_data = []
    
    # Nh√≥m tour theo ƒëi·ªÉm ƒë·∫øn v√† t·∫°o th√¥ng b√°o
    for destination in destinations_to_show:
        dest_tours = [t for t in all_recommended_tours if t.get('destination') == destination]
        if dest_tours:
            destination_messages.append(f"\nüåü Tour t·∫°i {destination}:")
            for i, tour in enumerate(dest_tours):
                title = tour.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                description = tour.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')
                price = tour.get('price', 'Kh√¥ng r√µ gi√°')
                duration = tour.get('duration', 'Kh√¥ng r√µ th·ªùi gian')
                
                destination_messages.append(f"{i+1}. {title}\n   - ƒêi·ªÉm ƒë·∫øn/Ho·∫°t ƒë·ªông: {description}\n   - Gi√°: {price} | Th·ªùi gian: {duration}\n")
                tours_data.append(format_tour_for_response(tour))
    
    # T·∫°o ph·∫ßn gi·ªõi thi·ªáu
    introduction = f"Hi·ªán c√≥ c√°c tour du l·ªãch h·∫•p d·∫´n t·∫°i {len(destinations_to_show)} ƒëi·ªÉm ƒë·∫øn ƒë·ªÉ b·∫°n l·ª±a ch·ªçn:"
    
    # K·∫øt h·ª£p th√†nh tin nh·∫Øn ho√†n ch·ªânh
    full_message = introduction + "".join(destination_messages)
    
    return {
        "status": "success",
        "message": full_message,
        "data": {
            "tours": tours_data
        },
        "error": None
    }

def _handle_pinecone_results(query, pinecone_results, conversation_state):
    global current_tour
    
    query_lower = query.lower()

    # Tr∆∞·ªõc ti√™n ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ n√†o kh√¥ng
    if not pinecone_results:
        return {
            "status": "warning",
            "message": "Kh√¥ng t√¨m th·∫•y tour ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.",
            "data": None,
            "error": None
        }
    
    interest_keywords = [
    "·∫©m th·ª±c", "gi·∫£i tr√≠", "ngh·ªâ d∆∞·ª°ng", "kh√°m ph√°", "vƒÉn h√≥a",
    "tham quan", "phi√™u l∆∞u", "ho·∫°t ƒë·ªông", "l·ªãch s·ª≠", "ƒÉn u·ªëng",
    "ƒëi ch∆°i", "t·∫Øm bi·ªÉn", "leo n√∫i", "c·∫Øm tr·∫°i", "check-in",
    "ch·ª•p ·∫£nh", "mua s·∫Øm", "spa", "massage", "th·ªÉ thao", 
    "ƒÉn", "u·ªëng", "h·∫£i s·∫£n", "m√≥n ngon", "ƒë·∫∑c s·∫£n" 
    ]
    
    # Ki·ªÉm tra ƒë·ªãa ƒëi·ªÉm c√≥ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p v√† c√≥ k·∫øt qu·∫£ ph√π h·ª£p kh√¥ng
    mentioned_location = None
    for location in SUPPORTED_DESTINATIONS:
        if location.lower() in query_lower:
            mentioned_location = location
            break
    
    if mentioned_location and not any(
        mentioned_location.lower() in res.get("destination", "").lower() for res in pinecone_results
    ):
        return {
            "status": "warning",
            "message": f"Kh√¥ng t√¨m th·∫•y tour n√†o t·∫°i {mentioned_location} ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.",
            "data": None,
            "error": None
        }
    
    # X·ª≠ l√Ω d·ª±a tr√™n t·ª´ kh√≥a li√™n quan ƒë·∫øn s·ªü th√≠ch
    if any(keyword in query_lower for keyword in interest_keywords):
        most_relevant = pinecone_results[0]
        
        context = (f"Ti√™u ƒë·ªÅ: {most_relevant.get('title', '')}, "
                   f"M√¥ t·∫£: {most_relevant.get('description', '')}, "
                   f"Gi√°: {most_relevant.get('price', '0')}, "
                   f"Th·ªùi gian: {most_relevant.get('duration', '0')}, "
                   f"ƒêi·ªÉm ƒë·∫øn: {most_relevant.get('destination', '')}, "
                   f"S·ªë ng∆∞·ªùi t·ªëi ƒëa: {most_relevant.get('maxParticipants', '0')}")

        prompt = f"""D·ª±a tr√™n th√¥ng tin tour sau: \n\n{context}\n\n
                      Tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng: '{query}'.
                      H√£y gi·ªõi thi·ªáu m·ªôt tour ph√π h·ª£p nh·∫•t v·ªõi y√™u c·∫ßu '{query}' c·ªßa ng∆∞·ªùi d√πng: \n\n
                      [T√™n Tour]\n - ƒêi·ªÉm ƒë·∫øn/Ho·∫°t ƒë·ªông: [M√¥ t·∫£ ng·∫Øn g·ªçn]\n - Gi√°: [Gi√°] | Th·ªùi gian: [Th·ªùi gian]\n\n
                      B·∫Øt ƒë·∫ßu v·ªõi m·ªôt c√¢u gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ tour n√†y."""
        
        # C·∫≠p nh·∫≠t current_tour
        current_tour = most_relevant
        conversation_state["last_tour_id"] = most_relevant.get('code', '')
        conversation_state["current_topic"] = "interest"
        
        try:
            ai_response = _get_ai_response(prompt)
            
            conversation_state["query_counter"] += 1
            
            return {
                "status": "success",
                "message": ai_response,
                "data": {"tours": [format_tour_for_response(most_relevant)]},
                "error": None
            }
        except Exception as e:
            return {
                "status": "error",
                "error": f"L·ªói khi g·ªçi model AI: {str(e)}",
                "message": "",
                "data": None
            }
    else:
        # X·ª≠ l√Ω v·ªõi t·∫•t c·∫£ k·∫øt qu·∫£
        context = "\n".join([
            f"Ti√™u ƒë·ªÅ: {tour.get('title', '')}, "
            f"M√¥ t·∫£: {tour.get('description', '')}, "
            f"Gi√°: {tour.get('price', '0')}, "
            f"Th·ªùi gian: {tour.get('duration', '0')}, "
            f"ƒêi·ªÉm ƒë·∫øn: {tour.get('destination', '')}, "
            f"S·ªë ng∆∞·ªùi t·ªëi ƒëa: {tour.get('maxParticipants', '0')}"
            for tour in pinecone_results
        ])

        prompt = f"""D·ª±a tr√™n th√¥ng tin tour sau: \n\n{context}\n\n
                      Tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng: '{query}'.
                      N·∫øu c√¢u h·ªèi l√† v·ªÅ danh s√°ch tour, h√£y tr√¨nh b√†y theo ƒë·ªãnh d·∫°ng sau cho m·ªói tour: \n\n
                      1. [T√™n Tour]\n  - ƒêi·ªÉm ƒë·∫øn/Ho·∫°t ƒë·ªông: [M√¥ t·∫£ ng·∫Øn g·ªçn]\n  - Gi√°: [Gi√°] | Th·ªùi gian: [Th·ªùi gian]\n\n
                      B·∫Øt ƒë·∫ßu b·∫±ng m·ªôt c√¢u gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ s·ªë l∆∞·ª£ng tour t√¨m th·∫•y."""
        
        try:
            ai_response = _get_ai_response(prompt)
            
            # C·∫≠p nh·∫≠t current_tour n·∫øu ch·ªâ c√≥ 1 k·∫øt qu·∫£
            if len(pinecone_results) == 1:
                current_tour = pinecone_results[0]
                conversation_state["last_tour_id"] = current_tour.get('code', '')
            
            conversation_state["query_counter"] += 1
            
            return {
                "status": "success",
                "message": ai_response,
                "data": {"tours": [format_tour_for_response(tour) for tour in pinecone_results]},
                "error": None
            }
        except Exception as e:
            return {
                "status": "error",
                "error": f"L·ªói khi g·ªçi model AI: {str(e)}",
                "message": "",
                "data": None
            }


def _handle_follow_up_question(query, tour, conversation_state):
    query_lower = query.lower()
    
    # TH√äM V√ÄO: Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ tour kh√°c
    if any(keyword in query_lower for keyword in ["tour kh√°c", "c√≤n tour n√†o", "tour m·ªõi"]):
        # G·ªçi h√†m x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ tour chung
        return _handle_general_tour_question(query, conversation_state)
    
    focus = _determine_question_focus(query_lower)
    
    tour_info = (f"Ti√™u ƒë·ªÅ: {tour.get('title', '')}, "
                 f"M√¥ t·∫£: {tour.get('description', '')}, "
                 f"Gi√°: {tour.get('price', '0')}, "
                 f"Th·ªùi gian: {tour.get('duration', '0')}, "
                 f"ƒêi·ªÉm ƒë·∫øn: {tour.get('destination', '')}, "
                 f"S·ªë ng∆∞·ªùi t·ªëi ƒëa: {tour.get('maxParticipants', '0')}")

    prompt = f"""D·ª±a tr√™n th√¥ng tin tour sau: \n\n{tour_info}\n\n
    Tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng: '{query}'.
    Ch·ªâ ƒë·ªÅ c·∫≠p ƒë·∫øn tour n√†y, kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn c√°c tour kh√°c.
    Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch v√† ƒë·∫ßy ƒë·ªß th√¥ng tin."""

    conversation_state["current_topic"] = focus
    conversation_state["query_counter"] += 1
    
    try:
        ai_response = _get_ai_response(prompt)
        
        response = {
            "status": "success",
            "message": ai_response,
            "data": _prepare_focus_data(focus, tour),
            "error": None
        }
        return response
    except Exception as e:
        return {
            "status": "error",
            "error": f"L·ªói khi g·ªçi model AI: {str(e)}",
            "message": "",
            "data": None
        }

def _handle_region_question(query, conversation_state):
    query_lower = query.lower()

    target_region = None
    if "mi·ªÅn b·∫Øc" in query_lower:
        target_region = "mi·ªÅn b·∫Øc"
    elif "mi·ªÅn trung" in query_lower:
        target_region = "mi·ªÅn trung"
    elif "mi·ªÅn nam" in query_lower:
        target_region = "mi·ªÅn nam"

    if not target_region:
        return {
            "status": "warning",
            "message": "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c mi·ªÅn b·∫°n mu·ªën du l·ªãch. Vui l√≤ng n√™u r√µ mi·ªÅn B·∫Øc, mi·ªÅn Trung hay mi·ªÅn Nam.",
            "data": None,
            "error": None
        }

    # L·ªçc c√°c ƒë·ªãa ƒëi·ªÉm h·ªó tr·ª£ theo mi·ªÅn
    supported_destinations_in_region = []
    for destination in SUPPORTED_DESTINATIONS:
        dest_region = get_region_from_destination(destination)
        if dest_region == target_region:
            supported_destinations_in_region.append(destination)

    # S·ªë ƒëi·ªÉm ƒë·∫øn t·ªëi ƒëa ƒë·ªÉ hi·ªÉn th·ªã
    max_destinations = 2
    selected_destinations = supported_destinations_in_region[:min(max_destinations, len(supported_destinations_in_region))]
    
    all_selected_tours = []
    dest_tour_mapping = {}
    
    for destination in selected_destinations:
        tours_for_destination = _find_tours_by_destination(destination)
        if tours_for_destination:
            tours_to_show = tours_for_destination[:min(1, len(tours_for_destination))]
            all_selected_tours.extend(tours_to_show)
            dest_tour_mapping[destination] = tours_to_show

    if not all_selected_tours:
        return {
            "status": "warning",
            "message": f"Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin v·ªÅ tour du l·ªãch ·ªü {target_region}.",
            "data": None,
            "error": None
        }

    all_tour_info = []
    for tour in all_selected_tours:
        tour_info = (f"Ti√™u ƒë·ªÅ: {tour.get('title', '')}, "
                   f"M√¥ t·∫£: {tour.get('description', '')}, "
                   f"Gi√°: {tour.get('price', '0')}, "
                   f"Th·ªùi gian: {tour.get('duration', '0')}, "
                   f"ƒêi·ªÉm ƒë·∫øn: {tour.get('destination', '')}, "
                   f"S·ªë ng∆∞·ªùi t·ªëi ƒëa: {tour.get('maxParticipants', '0')}")
        all_tour_info.append(tour_info)
    
    context = "\n\n".join(all_tour_info)

    prompt = f"""D·ª±a tr√™n th√¥ng tin tour sau: \n\n{context}\n\n
    Tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng: '{query}'.
    Ng∆∞·ªùi d√πng ƒëang t√¨m tour t·∫°i {target_region}.
    H√£y tr√¨nh b√†y tour theo ƒë·ªãa ƒëi·ªÉm, s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng sau: \n\n
    üìç [T√™n ƒê·ªãa ƒêi·ªÉm]:
    1. [T√™n Tour]\n   - ƒêi·ªÉm ƒë·∫øn/Ho·∫°t ƒë·ªông: [M√¥ t·∫£ ng·∫Øn g·ªçn]\n   - Gi√°: [Gi√°] | Th·ªùi gian: [Th·ªùi gian]\n\n
    B·∫Øt ƒë·∫ßu b·∫±ng m·ªôt c√¢u gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ s·ªë l∆∞·ª£ng tour t√¨m th·∫•y t·∫°i {target_region}."""

    ai_response = _get_ai_response(prompt)
    
    formatted_tours = []
    for tour in all_selected_tours:
        formatted_tours.append(format_tour_for_response(tour))
    
    return {
        "status": "success",
        "message": ai_response,
        "data": {
            "region": target_region,
            "tours": formatted_tours
        },
        "error": None
    }

def _handle_keyword_matches(query, tours, conversation_state):
    if len(tours) == 1:
        global current_tour
        current_tour = tours[0]
        conversation_state["last_tour_id"] = tours[0].get('code', '')
        return _handle_specific_tour_question(query, tours[0], conversation_state)
    
    tour_contexts = []
    for tour in tours:
        tour_info = (f"Ti√™u ƒë·ªÅ: {tour.get('title', '')}, "
                 f"M√¥ t·∫£: {tour.get('description', '')}, "
                 f"Gi√°: {tour.get('price', '0')}, "
                 f"Th·ªùi gian: {tour.get('duration', '0')}, "
                 f"ƒêi·ªÉm ƒë·∫øn: {tour.get('destination', '')}, "
                 f"S·ªë ng∆∞·ªùi t·ªëi ƒëa: {tour.get('maxParticipants', '0')}")
        tour_contexts.append(tour_info)
    
    context = "\n\n".join(tour_contexts)
    
    prompt = f"""D·ª±a tr√™n th√¥ng tin tour sau: \n\n{context}\n\n
    Tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng: '{query}'.
    H√£y gi·ªõi thi·ªáu c√°c tour ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng theo ƒë·ªãnh d·∫°ng sau: \n\n
    1. [T√™n Tour]\n   - ƒêi·ªÉm ƒë·∫øn/Ho·∫°t ƒë·ªông: [M√¥ t·∫£ ng·∫Øn g·ªçn]\n   - Gi√°: [Gi√°] | Th·ªùi gian: [Th·ªùi gian]\n\n
    B·∫Øt ƒë·∫ßu b·∫±ng m·ªôt c√¢u gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ c√°c tour ƒë∆∞·ª£c t√¨m th·∫•y."""
    
    try:
        ai_response = _get_ai_response(prompt)
        
        return {
            "status": "success",
            "message": ai_response,
            "data": {"tours": [format_tour_for_response(tour) for tour in tours]},
            "error": None
        }
    except Exception as e:
        return {
            "status": "error",
            "error": f"L·ªói khi g·ªçi model AI: {str(e)}",
            "message": "",
            "data": None
        }
    
    
# 6. C√°c h√†m t·∫°o response
def _create_success_response(message, data=None):
    """T·∫°o ph·∫£n h·ªìi th√†nh c√¥ng."""
    return {
        "status": "success",
        "message": message,
        "data": data,
        "error": None
    }

def _create_warning_response(message, data=None):
    """T·∫°o ph·∫£n h·ªìi c·∫£nh b√°o."""
    return {
        "status": "warning",
        "message": message,
        "data": data,
        "error": None
    }

def _create_error_response(error_message):
    """T·∫°o ph·∫£n h·ªìi l·ªói."""
    return {
        "status": "error",
        "error": error_message,
        "message": "",
        "data": None
    }

# 7. H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi
def search(query):
    global current_tour, last_query, conversation_state
    
    # 1. Ki·ªÉm tra v√† ti·ªÅn x·ª≠ l√Ω query
    if not query.strip() or not any(c.isalnum() for c in query):
        return _create_error_response("Vui l√≤ng nh·∫≠p c√¢u h·ªèi h·ª£p l·ªá!")  
    
    last_query = query
    query_lower = query.lower()
    
    # 2. X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi
    query_type = _determine_query_type(query_lower, conversation_state)
    print(f"Query Type: {query_type}")
    
    # 3. X·ª≠ l√Ω theo lo·∫°i c√¢u h·ªèi
    if query_type == "empty":
        return _create_error_response("Vui l√≤ng nh·∫≠p c√¢u h·ªèi h·ª£p l·ªá!")
    elif query_type == "region":
        return _handle_region_question(query, conversation_state)
    elif query_type == "follow_up":
        return _handle_follow_up_question(query, current_tour, conversation_state)
    elif query_type == "specific_tour":  
        # ∆Øu ti√™n t√¨m theo t√™n tour
        tour_by_name = _find_tour_by_similar_name(query_lower)
        if tour_by_name:
            return _handle_specific_tour_question(query, tour_by_name, conversation_state)
        
        # Ho·∫∑c t√¨m tour c·ª• th·ªÉ
        matched_tour = _find_specific_tour(query_lower)
        if matched_tour:
            return _handle_specific_tour_question(query, matched_tour, conversation_state)
    elif query_type == "activity":
        keyword_matches = _find_tour_by_keywords(query)
        if keyword_matches:
            return _handle_keyword_matches(query, keyword_matches, conversation_state)
        else:
            return _create_warning_response(
                f"Xin l·ªói, kh√¥ng t√¨m th·∫•y tour n√†o c√≥ ho·∫°t ƒë·ªông ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. Ch√∫ng t√¥i hi·ªán ch·ªâ c√≥ tour t·∫°i: {', '.join(SUPPORTED_DESTINATIONS)}."
            )
    elif query_type == "new_tour":
        current_tour = None
        conversation_state = _reset_conversation_state()
    elif query_type == "general_tour":
        return _handle_general_tour_question(query, conversation_state)
    elif query_type == "non_tour":
        return _create_error_response("C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn tour. Vui l√≤ng h·ªèi v·ªÅ c√°c tour ho·∫∑c ƒëi·ªÉm ƒë·∫øn.")
    
    # 4.0 Ki·ªÉm tra n·∫øu ƒëang t√¨m tour c·ª• th·ªÉ theo t√™n
    tour_by_name = _find_tour_by_similar_name(query_lower)
    if tour_by_name:
        return _handle_specific_tour_question(query, tour_by_name, conversation_state)
    
    # 4.1. T√¨m tour c·ª• th·ªÉ (n·∫øu c√≥)
    matched_tour = _find_specific_tour(query_lower)
    if matched_tour:
        return _handle_specific_tour_question(query, matched_tour, conversation_state)
    
    # 4.2. T√¨m theo ƒëi·ªÉm ƒë·∫øn 
    destination = is_destination_related(query)
    if destination:
        # Ki·ªÉm tra xem ƒëi·ªÉm ƒë·∫øn c√≥ n·∫±m trong danh s√°ch ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
        if destination not in SUPPORTED_DESTINATIONS:
            return {
                "status": "warning",
                "message": f"Xin l·ªói, hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin v·ªÅ tour. Ch√∫ng t√¥i hi·ªán ch·ªâ c√≥ tour t·∫°i: {', '.join(SUPPORTED_DESTINATIONS)}.",
                "data": None,
                "error": None
            }
        return _handle_destination_question(query, destination, conversation_state)
    
    # 4.3. T√¨m theo t·ª´ kh√≥a trong m√¥ t·∫£ (∆ØU TI√äN T√åM KI·∫æM HO·∫†T ƒê·ªòNG ·ªû ƒê√ÇY)
    keyword_matches = _find_tour_by_keywords(query)
    if keyword_matches:
        return _handle_keyword_matches(query, keyword_matches, conversation_state)
    
    # 4.4. X·ª≠ l√Ω c√¢u h·ªèi chung v·ªÅ tour
    if _is_general_tour_question(query_lower):
        return _handle_general_tour_question(query, conversation_state)
    
    # 4.5. T√¨m ki·∫øm Pinecone n·∫øu kh√¥ng kh·ªõp v·ªõi c√°c tr∆∞·ªùng h·ª£p tr√™n
    pinecone_results = query_pinecone(query, top_k=3)
    if pinecone_results:
        return _handle_pinecone_results(query, pinecone_results, conversation_state)
    
    # 5. Kh√¥ng t√¨m th·∫•y th√¥ng tin
    return _create_warning_response(
        f"Xin l·ªói, hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin v·ªÅ tour. Ch√∫ng t√¥i hi·ªán ch·ªâ c√≥ tour t·∫°i: {', '.join(SUPPORTED_DESTINATIONS)}."
    )
def main():
    load_all_tours()

    while True:
        user_query = input("\nNh·∫≠p c√¢u h·ªèi (b·∫•m 'z' ƒë·ªÉ tho√°t): ")
        if user_query.lower() == "z":
            print("üëã H·∫πn g·∫∑p l·∫°i!")
            break
        
        result = search(user_query)
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON cho m·ª•c ƒë√≠ch testing
        print(json.dumps(result, ensure_ascii=False, indent=2))

def handle_query(query):
    if not ALL_TOURS:
        load_all_tours()

    return search(query)

if __name__ == "__main__":
    main()